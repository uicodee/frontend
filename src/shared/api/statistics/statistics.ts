/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Statistics
} from '.././model'
import { createInstance } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get all stats
 * @summary Get All Stats
 */
export const getAllStatsStatisticsAllGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<Statistics>(
      {url: `/statistics/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllStatsStatisticsAllGetQueryKey = () => {
    return [`/statistics/all`] as const;
    }

    
export const getGetAllStatsStatisticsAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllStatsStatisticsAllGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>> = ({ signal }) => getAllStatsStatisticsAllGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllStatsStatisticsAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>>
export type GetAllStatsStatisticsAllGetQueryError = unknown

/**
 * @summary Get All Stats
 */
export const useGetAllStatsStatisticsAllGet = <TData = Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStatsStatisticsAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllStatsStatisticsAllGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



