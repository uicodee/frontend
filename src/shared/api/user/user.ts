/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  User
} from '.././model'
import { createInstance } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get all trips
 * @summary Get Trips
 */
export const getTripsUserGetMeGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<User[]>(
      {url: `/user/get-me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTripsUserGetMeGetQueryKey = () => {
    return [`/user/get-me`] as const;
    }

    
export const getGetTripsUserGetMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getTripsUserGetMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTripsUserGetMeGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTripsUserGetMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTripsUserGetMeGet>>> = ({ signal }) => getTripsUserGetMeGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTripsUserGetMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTripsUserGetMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTripsUserGetMeGet>>>
export type GetTripsUserGetMeGetQueryError = unknown

/**
 * @summary Get Trips
 */
export const useGetTripsUserGetMeGet = <TData = Awaited<ReturnType<typeof getTripsUserGetMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTripsUserGetMeGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTripsUserGetMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



