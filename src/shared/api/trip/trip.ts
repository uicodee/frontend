/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  SearchTripsTripSearchGetParams,
  TripOutput,
  Trips
} from '.././model'
import { createInstance } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get all trips
 * @summary Get Trips
 */
export const getTripsTripAllGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<Trips[]>(
      {url: `/trip/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTripsTripAllGetQueryKey = () => {
    return [`/trip/all`] as const;
    }

    
export const getGetTripsTripAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getTripsTripAllGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTripsTripAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTripsTripAllGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTripsTripAllGet>>> = ({ signal }) => getTripsTripAllGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTripsTripAllGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTripsTripAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getTripsTripAllGet>>>
export type GetTripsTripAllGetQueryError = unknown

/**
 * @summary Get Trips
 */
export const useGetTripsTripAllGet = <TData = Awaited<ReturnType<typeof getTripsTripAllGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTripsTripAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTripsTripAllGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Search Trips
 */
export const searchTripsTripSearchGet = (
    params: SearchTripsTripSearchGetParams,
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<TripOutput[]>(
      {url: `/trip/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchTripsTripSearchGetQueryKey = (params: SearchTripsTripSearchGetParams,) => {
    return [`/trip/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchTripsTripSearchGetQueryOptions = <TData = Awaited<ReturnType<typeof searchTripsTripSearchGet>>, TError = HTTPValidationError>(params: SearchTripsTripSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchTripsTripSearchGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchTripsTripSearchGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchTripsTripSearchGet>>> = ({ signal }) => searchTripsTripSearchGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchTripsTripSearchGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchTripsTripSearchGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchTripsTripSearchGet>>>
export type SearchTripsTripSearchGetQueryError = HTTPValidationError

/**
 * @summary Search Trips
 */
export const useSearchTripsTripSearchGet = <TData = Awaited<ReturnType<typeof searchTripsTripSearchGet>>, TError = HTTPValidationError>(
 params: SearchTripsTripSearchGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchTripsTripSearchGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getSearchTripsTripSearchGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



