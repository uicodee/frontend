/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Session
} from '.././model'
import { createInstance } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get sessions
 * @summary Get Sessions
 */
export const getSessionsSessionAllGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<Session[]>(
      {url: `/session/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSessionsSessionAllGetQueryKey = () => {
    return [`/session/all`] as const;
    }

    
export const getGetSessionsSessionAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getSessionsSessionAllGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSessionsSessionAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSessionsSessionAllGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSessionsSessionAllGet>>> = ({ signal }) => getSessionsSessionAllGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSessionsSessionAllGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSessionsSessionAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getSessionsSessionAllGet>>>
export type GetSessionsSessionAllGetQueryError = unknown

/**
 * @summary Get Sessions
 */
export const useGetSessionsSessionAllGet = <TData = Awaited<ReturnType<typeof getSessionsSessionAllGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSessionsSessionAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSessionsSessionAllGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



