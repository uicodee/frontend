/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  PromocodeInput,
  PromocodeOutput
} from '.././model'
import { createInstance } from '.././http/index';
import type { BodyType } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Get all promocodes
 * @summary Get Promocodes
 */
export const getPromocodesPromocodeAllGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<PromocodeOutput[]>(
      {url: `/promocode/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPromocodesPromocodeAllGetQueryKey = () => {
    return [`/promocode/all`] as const;
    }

    
export const getGetPromocodesPromocodeAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPromocodesPromocodeAllGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>> = ({ signal }) => getPromocodesPromocodeAllGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPromocodesPromocodeAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>>
export type GetPromocodesPromocodeAllGetQueryError = unknown

/**
 * @summary Get Promocodes
 */
export const useGetPromocodesPromocodeAllGet = <TData = Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPromocodesPromocodeAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPromocodesPromocodeAllGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create new promocode
 * @summary Create Promocode
 */
export const createPromocodePromocodeNewPost = (
    promocodeInput: BodyType<PromocodeInput>,
 options?: SecondParameter<typeof createInstance>,) => {
      
      
      return createInstance<PromocodeOutput>(
      {url: `/promocode/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: promocodeInput
    },
      options);
    }
  


export const getCreatePromocodePromocodeNewPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>, TError,{data: BodyType<PromocodeInput>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>, TError,{data: BodyType<PromocodeInput>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>, {data: BodyType<PromocodeInput>}> = (props) => {
          const {data} = props ?? {};

          return  createPromocodePromocodeNewPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePromocodePromocodeNewPostMutationResult = NonNullable<Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>>
    export type CreatePromocodePromocodeNewPostMutationBody = BodyType<PromocodeInput>
    export type CreatePromocodePromocodeNewPostMutationError = HTTPValidationError

    /**
 * @summary Create Promocode
 */
export const useCreatePromocodePromocodeNewPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>, TError,{data: BodyType<PromocodeInput>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createPromocodePromocodeNewPost>>,
        TError,
        {data: BodyType<PromocodeInput>},
        TContext
      > => {

      const mutationOptions = getCreatePromocodePromocodeNewPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    