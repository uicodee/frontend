/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ColorInput,
  ColorOutput,
  DeleteCarColorDeleteDeleteParams,
  EditColor,
  HTTPValidationError
} from '.././model'
import { createInstance } from '.././http/index';
import type { BodyType } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create color
 * @summary Create Color
 */
export const createColorColorNewPost = (
    colorInput: BodyType<ColorInput>,
 options?: SecondParameter<typeof createInstance>,) => {
      
      
      return createInstance<ColorOutput>(
      {url: `/color/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: colorInput
    },
      options);
    }
  


export const getCreateColorColorNewPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createColorColorNewPost>>, TError,{data: BodyType<ColorInput>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createColorColorNewPost>>, TError,{data: BodyType<ColorInput>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createColorColorNewPost>>, {data: BodyType<ColorInput>}> = (props) => {
          const {data} = props ?? {};

          return  createColorColorNewPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateColorColorNewPostMutationResult = NonNullable<Awaited<ReturnType<typeof createColorColorNewPost>>>
    export type CreateColorColorNewPostMutationBody = BodyType<ColorInput>
    export type CreateColorColorNewPostMutationError = HTTPValidationError

    /**
 * @summary Create Color
 */
export const useCreateColorColorNewPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createColorColorNewPost>>, TError,{data: BodyType<ColorInput>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createColorColorNewPost>>,
        TError,
        {data: BodyType<ColorInput>},
        TContext
      > => {

      const mutationOptions = getCreateColorColorNewPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Edit color by ID
 * @summary Edit Color
 */
export const editColorColorEditPut = (
    editColor: BodyType<EditColor>,
 options?: SecondParameter<typeof createInstance>,) => {
      
      
      return createInstance<ColorOutput>(
      {url: `/color/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editColor
    },
      options);
    }
  


export const getEditColorColorEditPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editColorColorEditPut>>, TError,{data: BodyType<EditColor>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof editColorColorEditPut>>, TError,{data: BodyType<EditColor>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editColorColorEditPut>>, {data: BodyType<EditColor>}> = (props) => {
          const {data} = props ?? {};

          return  editColorColorEditPut(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditColorColorEditPutMutationResult = NonNullable<Awaited<ReturnType<typeof editColorColorEditPut>>>
    export type EditColorColorEditPutMutationBody = BodyType<EditColor>
    export type EditColorColorEditPutMutationError = HTTPValidationError

    /**
 * @summary Edit Color
 */
export const useEditColorColorEditPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editColorColorEditPut>>, TError,{data: BodyType<EditColor>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof editColorColorEditPut>>,
        TError,
        {data: BodyType<EditColor>},
        TContext
      > => {

      const mutationOptions = getEditColorColorEditPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete car by ID
 * @summary Delete Car
 */
export const deleteCarColorDeleteDelete = (
    params: DeleteCarColorDeleteDeleteParams,
 options?: SecondParameter<typeof createInstance>,) => {
      
      
      return createInstance<unknown>(
      {url: `/color/delete`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteCarColorDeleteDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>, TError,{params: DeleteCarColorDeleteDeleteParams}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>, TError,{params: DeleteCarColorDeleteDeleteParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>, {params: DeleteCarColorDeleteDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteCarColorDeleteDelete(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCarColorDeleteDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>>
    
    export type DeleteCarColorDeleteDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Car
 */
export const useDeleteCarColorDeleteDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>, TError,{params: DeleteCarColorDeleteDeleteParams}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCarColorDeleteDelete>>,
        TError,
        {params: DeleteCarColorDeleteDeleteParams},
        TContext
      > => {

      const mutationOptions = getDeleteCarColorDeleteDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get all colors
 * @summary Get Colors
 */
export const getColorsColorAllGet = (
    
 options?: SecondParameter<typeof createInstance>,signal?: AbortSignal
) => {
      
      
      return createInstance<ColorOutput[]>(
      {url: `/color/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetColorsColorAllGetQueryKey = () => {
    return [`/color/all`] as const;
    }

    
export const getGetColorsColorAllGetQueryOptions = <TData = Awaited<ReturnType<typeof getColorsColorAllGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getColorsColorAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetColorsColorAllGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getColorsColorAllGet>>> = ({ signal }) => getColorsColorAllGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getColorsColorAllGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetColorsColorAllGetQueryResult = NonNullable<Awaited<ReturnType<typeof getColorsColorAllGet>>>
export type GetColorsColorAllGetQueryError = unknown

/**
 * @summary Get Colors
 */
export const useGetColorsColorAllGet = <TData = Awaited<ReturnType<typeof getColorsColorAllGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getColorsColorAllGet>>, TError, TData>>, request?: SecondParameter<typeof createInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetColorsColorAllGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



