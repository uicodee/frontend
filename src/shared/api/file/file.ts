/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Taxopark API
 * Taxopark is a company that transports passengers between cities
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  BodyUploadFileFileUploadPost,
  File,
  HTTPValidationError
} from '.././model'
import { createInstance } from '.././http/index';
import type { BodyType } from '.././http/index';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Upload new file
 * @summary Upload File
 */
export const uploadFileFileUploadPost = (
    bodyUploadFileFileUploadPost: BodyType<BodyUploadFileFileUploadPost>,
 options?: SecondParameter<typeof createInstance>,) => {
      
      const formData = new FormData();
formData.append('file', bodyUploadFileFileUploadPost.file)

      return createInstance<File>(
      {url: `/file/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUploadFileFileUploadPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFileFileUploadPost>>, TError,{data: BodyType<BodyUploadFileFileUploadPost>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadFileFileUploadPost>>, TError,{data: BodyType<BodyUploadFileFileUploadPost>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFileFileUploadPost>>, {data: BodyType<BodyUploadFileFileUploadPost>}> = (props) => {
          const {data} = props ?? {};

          return  uploadFileFileUploadPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadFileFileUploadPostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFileFileUploadPost>>>
    export type UploadFileFileUploadPostMutationBody = BodyType<BodyUploadFileFileUploadPost>
    export type UploadFileFileUploadPostMutationError = HTTPValidationError

    /**
 * @summary Upload File
 */
export const useUploadFileFileUploadPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFileFileUploadPost>>, TError,{data: BodyType<BodyUploadFileFileUploadPost>}, TContext>, request?: SecondParameter<typeof createInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof uploadFileFileUploadPost>>,
        TError,
        {data: BodyType<BodyUploadFileFileUploadPost>},
        TContext
      > => {

      const mutationOptions = getUploadFileFileUploadPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    